𝐍𝐎𝐓𝐄: 𝐜𝐫𝐲𝐩𝐭𝐨𝐠𝐫𝐚𝐩𝐡𝐲_𝐫𝐮𝐧𝐧𝐞𝐫.𝐩𝐲 𝐈𝐒 𝐍𝐎𝐓 𝐀𝐒 𝐑𝐄𝐋𝐈𝐀𝐁𝐋𝐄 𝐀𝐒 𝐭𝐞𝐬𝐭.𝐩𝐲



Needed Non-Standard Modules:



################################################################################# USAGE OF AVAILABLE COMMANDS ##########
    User input is unix-like, with: command [optional flag] (argument) <optional argument>
    File paths with spaces must escape spaces with : "\ "
    The working directory is the outer Cryptography file. For example, the file path of Clarissa.txt in Resources is
        Resources/Library/Clarissa.txt

    encrypt (cipher) (plaintext_file_path*)  <output_file_path>
        This encrypts with "cipher" using the text from "plaintext_file_path" as a plaintext. There will be two files
        created as a result of this encryption: the encrypted file AND info about the encryption. "output_file_path",
        if provided, is the location where the encrypted file is created. Otherwise, a default file path will be
        created. The info about the encryption is stored in a file with the same name as the "output_file_path" but
        appended with "_(Relevant information)".

        *the "plaintext_file_path" may be shortened to just the file name and not the whole file path. For example,
        Resources/Library/Clarissa.txt can be passed in as Clarissa.txt and the command will still work. This will only
        work for the files in The four folders in the Resources folder.

    decrypt (cipher) (ciphertext_file_path) <output_file_path>
        Does the same thing as encrypt, but decrypts. Note that there are more decryption ciphers than encryption ones.
        This is because some decryption ciphers only decrypt.

    test    OR    test [flag]    OR    test (decryption_cipher)
        1. test
            Just typing "test" will enter into testing mode, where the word "test" is already provided as the first
            command and [optional flag] or (decryption_cipher) must be inputted

        2. test [flag]
            -e: exit the testing mode back into regular mode where commands other than "test" can be used

            -a: automated testing. Tests are run automatically on all decryption* ciphers. If this flag is provided
                    while NOT already in testing mode, then the user is automatically exited out of testing mode upon
                    completion. Otherwise, if ALREADY IN testing mode, then program will continue in testing mode.

                    * The encryption cipher corresponding to the decryption cipher should never raise an error.

            -c: will clear all logs in Resources/Files_Logs

        3. test (decryption_cipher)
            This command will run a test with parameters (such as plaintext, key...) described in Cryptography/test.py.
            The corresponding encrypt cipher to the user provided "decryption_cipher" will be used to encrypt the
            plaintext. Then, the ciphertext will be decrypted with the user provided "decryption_cipher". This
            decryption result will be compared against the plaintext for correctness.

    database [flags] (cipher) (new_database_file_name)    OR     database [flags] (database_file_name)
             OR     database [flags]
        1. database [flags] (cipher) (new_database_file_name)
            -n (cipher) (new_database_file_name): Create a new database with name: "new_database_file_name". The
            method of encryption is "cipher", which must be a valid encryption cipher. The program will ask for the
            key for encryption and/or decryption later on if necessary.

            -e (cipher) (abs_file_path_to_new_database): The file pointed to by "abs_file_path_to_new_database"
            will be turned into a new database file with info file. "cipher" will be the encrypting cipher used.

        2. database [flags] (database_file_name)
            -o (database_file_name): Open up the encrypted database named: "database_file_name"

        3. database [flags]
            -c: Clear all files in the Resources/Database folder. The program will ask the user for a check before
            the deletion actually occurs.

            -i: Print out the usage of database.

    help
        Will print out helpful information

    exit
        Will exit the program

    clear     OR     clear [flags]
        1. clear:
            Clears files in Files_Decrypted and Files_Encrypted

        2. clear [flags]:
            -a: Clear everything in Resources/Databases, Resources/Files_Decrypted, Resources/Files_Encrypted, and
                                    Resources/Logs














############################################################################################### DOCUMENTATION ##########

PROJECT STRUCTURE (Cryptography)
    This project has six main components, as well as five folders for storage.

        The six main components (in Cryptography) are:
            -cryptography_runner.py - this file holds the main runner program that takes in user input, and performs the
                                            encryption/decryption.
            -misc.py                - this file holds functions and resources useful throughout the project.
            -test.py                - this file runs the decryption/encryption functions and tests for correctness and
                                            performance
            -database.py            - this file holds everything necessary for handling the encryption/decryption of
                                            databases.
            -package Ciphers        - this package holds all the different cipher objects, each one containing a method
                                            encryption and decryption. It also contains the .py file for the superclass
                                            of all the different cipher objects.


        The five folders are:
            -Resources/Algorithm_Resources - Files that some misc functions use as resources. NOT used by user.
            -Resources/Library             - this folder stores all text files you want to use with this program (most
                                             likely as plaintext)
            -Resources/Files_Decrypted     - this is where the generated decrypted files go
            -Resources/Files_Encrypted     - this is where the generated encrypted files go
            -Resources/Files_Logs          - where the logs from testing go
            -Resources/Databases           - holds encrypted databases, along with info files about those databases.







CRYPTOGRAPHY_RUNNER.PY



DATABASE.PY



MISC.PY
    This file holds functions and resources useful throughout the project

    Structure:
        I.   Resources - this area hold resources that generally deal with the type of encryptions/decryptions and
                 character sets available. Also, some resources necessary for algorithms in the same file is also stored
                 here.

        II.  User Interfacing and Function Calls - these functions are called from files from Decryption and Encryption
                 when their execute() function is called. It makes calls to Section IV in order to get
                 user data and write down useful information. These functions also return the encrypted/decrypted text
                 back to execute()

        III. Useful Algorithms - this contains algorithms that are used in encrypt() and decrypt() from files in
                 Encryption and Decryption

        IV.  Helper Functions - functions to process user input and write down relevant information. Called from
                 functions in Section II for convenience.


TEST.PY





Package Ciphers


    ### GENERAL FILE FORMAT ###
        I.   Cipher info - Class variables that describe what the cipher is, and how to use the cipher.

        II.  Constructor - Constructor that instantiates objects with the instance variables. Encryption and decrytion
                 are done with these constructed objects and their methods.

        III. def encrypt_plaintext() - This is the method that encypts the object's plaintext variable. This variable,
                 along with all other parameters for encryption (such as char_set, mode_of_op, etc.) must be set before
                 encrypt_plaintext() is called.

        IV.  def decrypt_ciphertext() - This method decrypts the object's ciphertext variable. Like
                 encrypt_plaintext(), the object's relevant instance variables must be set before usage.

        V.   def write_statistics(file_path) - This method writes out statistics of the encryption/decryption for
                 testing mode (This is not used when a regular info file is created in cryptography_runner). This works
                 by calling the super method in class Cipher in file _cipher, which is write_statistics(file_path,
                 extra_lines). For many cases, extra_lines is a blank dictionary.
                     Sometimes, we want additional statistics* to be written (additional meaning more than the default
                 statistics that the super method writes). In that case, extra_lines is no longer blank. It becomes the
                 dictionary in which the KEYS are the line numbers that extra statistics are to be inserted into, and
                 the VALUES are the actual line (is a string) to insert in.
                     *The super method writes different statistics based on the type of cipher the calling object is.
                 So, for example, the default statistics for an asymmetric block cipher is different from the
                 default statistics for a regular symmetric cipher.

        VI.  def _ciphername_on_block(block) - BLOCK CIPHERS ONLY. This is the actual algorithm that operates on a
                 block.
                     Typically, this static method has some static variables (which are often in some way related to
                 the key). In this case, all the methods handling the key MUST be run first before this method is
                 called.
















########## OUTDATED BELOW ##########

ENCRYPTION

    ### GENERAL FILE FORMAT ###
        I. def execute() - this function makes a call to misc's function to encrypt/decrypt in the section:
               USER INTERFACING AND FUNCTION CALLS. misc's function asks for user input and and writes down
               relevant information to a file. It also returns the encrypted text for this function(execute) to return
               back to cryptography_runner.py. This function is called from cryptography_runner.py

        II. def encrypt() - this function contains the actual algorithm to encrypt the plaintext. It is generally
                called from misc' encrypt/decrypt function. When in testing mode, however, it is called from test.py

        III. (BLOCK CIPHERS ONLY) def _"name of cipher"_on_block() - this function is the algorithm applied onto the
                 actual block of integers

        IV. (BLOCK CIPHERS ONLY) def _prep_...() - this function is often run right before III. can be run. It sets up
                for III. to be used


    ROTATION.PY
        This shifts the unicode values of the plaintext up (addition) by the amount that the key is in unicode.


    RSA.PY
        This encrypts using an RSA cipher with no padding. If the text is longer than the key, then the text
            is divided into blocks that are the same size as the key. The public key and the private key format is this:
            "RSA (length of e or d) (e or d) n" These strings are rendered in a encoded form using whichever scheme.

         Note: The public key in base4096 encoding is a bit difficult to enter in correctly.


    VIGENERE.PY
        This is the regular vigenere that does what is expected. Straighforward.


    VIGENERE_EXPONENTIAL.PY
        This vigenere takes the plaintext value to the power of the keyword character value. This
            results in a ciphertext whose characters are even more evenly distributed in unicode.

        The ciphertext is stored in "units," which look like: (encoded_character + num_overlaps + " ") "num_overlaps"
            represents the number of unicode values that, when pow(value, key_unicode_val, alphabet_size) is calculated,
            give the same result as when pow(plaintext_unicode_val, key_unicode_val, alphabet_size) is calculated.
            Storing this is necessary for decryption in order to figure out which character was the original plaintext
            since there are overlaps.

        Note: Decryption assumes that the plaintext uses only ascii characters(for performance).

        Note: Only use characters in the extended_ascii set for the plaintext.

        Note*: Unicode has certain characters called surrogates. These are unprintable. As a result, I had to adjust my
            numbers so that any values that would match surrogates are pushed into the corresponding character. This
            corresponding character is as far away from the end of the surrogates as the "before" value is from the
            start of the surrogates. Basically, just add 2048 (the number of surrogates) to all unicode values
            after and including the beginning surrogate (55296). To reverse this during decryption, subtract 2048 from
            all unicode values that come after the ending surrogate (57343)


    VIGENERE_MULTIPLICATIVE.PY
        This vigenere multiplies the character values instead of add. I added this to access more of the characters in
        unicode.* The formatting of the ciphertext is similar to what is done with VIGENERE_EXPONENTIAL.PY, due to
        possible overlaps.

        Note: Stored ciphertext in same sort of format in VIGENERE_EXPONENTIAL (units).

        Note*: See note on unicode in VIGENERE_EXPONENTIAL.










DECRYPTION

    ### GENERAL FILE FORMAT ###

        I. CIPHER INFO (some files) - Where variables about the cipher are stored.
               (1) char_set - the type of character set used, either misc.ALPHABETS or
                       misc.BINARY_TO_CHAR_ENCODING_SCHEMES
               (2) cipher_type - symmetric or asymmetric

               (3) key_size = the size/type of the key used for encrypting/decryption
                   i.   "zero characters" is an encrypting cipher that doesn't need a key input
                   ii.  "calculated characters" is a decrypting cipher that finds the key automatically
                   iii. "single character" is a symmetric encrypting/decrypting cipher that uses a single user-entered
                            character
                   iv.  "multiple characters" is an symmetric encrypting/decrypting cipher that uses user-entered
                            multiple characters
                   v.   "multiple generated characters" is a symmetric encrypting/decrypting cipher that uses randomly
                            generated keys

               (4) ciphertext_alphabet_restricted - Applies only to ciphers that use alphabets. "Restricted" means that
                    the alphabet to use during encryption (same as the alphabet of the resulting ciphertext) must
                    be the same as, or bigger than, the alphabet that the plaintext is in.

               (5) no_short_texts - This decryption cipher cannot be used on short texts (mostly because the cipher
                       relies on detecting English).

        II. CIPHER SETTINGS (some files) - Where settings for the cipher are stored. For example, rsa has a setting for
                the number of bits to use for the key.

        III. def execute() - this function makes a call to misc's function to encrypt/decrypt in the section:
                 USER INTERFACING AND FUNCTION CALLS. misc's function asks for user input if necessary and and writes
                 down relevant information to a file. It also returns the decrypted text for this function(execute) to
                 return back to cryptography_runner.py. This function is called from cryptography_runner.py

        IV. def testing_execute() - this function is called from test.py. It is the testing form of execute, which means
                that file are not generated in Files_Encrypted or Files_Decrypted. Instead, it writes statistics and
                plain and ciphertext to a file in Files_Logs. This function either calls a general one from misc, or it
                writes specialized statistics itself directly from this function.

        V. def decrypt() - this function contains the actual algorithm to decrypt the ciphertext. It is generally called
               from misc' encrypt/decrypt function. When in testing mode, however, it is called from testing_execute()

        VI. (BLOCK CIPHERS ONLY) def _"name of cipher"_on_block() - this function is the algorithm applied onto the
                actual block of integers

        VII. (BLOCK CIPHERS ONLY) def _prep_...() - this function is often run right before III. can be run. It sets up
                 for VI. to be used

