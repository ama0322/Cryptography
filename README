


USAGE

To encrypt, type: "-e " + "text*" + encryption_type + name_and_location_of_encrypted_file**
To decrypt, type: "-d " + "text*" + decryption_type + name_and_location_of_decrypted_file**

   *Type out the text in quotation marks or type "-i " followed by the file name and location(not in quotes)
       * Notes: File names should not contain spaces.
   **If no name and  location is given for the newly generated file, a default name and location will be given

To print out the available cipher types, type "help"
To exit the program, type "exit"
To clear files in decrypted and encrypted, type "clear"

To enter testing mode, enter "test"
    In testing mode, type "clear" to clear logs
    Manually change the code in test.py in order to change options.






EXAMPLES

"-e "qwertyuiop qwertyuiop" vigenere"
    This will encrypt the word "qwertyuiop qwertyuiop" using a vigenere cipher. A default name and location is provided
    for the generated file

"-e Library/plain.txt vigenere"
    This will encrypt plain.txt, which is located in Library, using a vigenere cipher. A default name and location is
    provided for the generated file

"-e Library/plain.txt vigenere Encrypted/vigenere_encrypted_plain.txt"
    This will encrypt plain.txt, which is located in Library, using a vigenere cipher. In addition, the name and
    location for the generated file is created.

"-d Encrypted/unknown_encrypted_plain.txt"
    This will attempt to decrypt unknown_encrypted_plain.txt using all methods. Use this when the method of encryption
    is unknown

"-d Encrypted/vigenere_encrypted_plain.txt"
    This will decrypt plain.txt using a vigenere cipher, with or without a key. Further instructions will be provided.




DOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATIONDOCUMENTATION

PROJECT STRUCTURE
    This project has four main components, as well as four folders for storage.

        The three main components are:
            -cryptography_runner.py - this file holds the main runner program that takes in user input, and performs the
                      encryption/decryption.
            -miscellanous.py - this file holds functions and resources useful throughout the project.
            -test.py - this file runs the decryption/encryption functions and tests for correctness and performance
            -package Decryption - this package holds all files necessary to perform a decryption
            -package Encryption - this package holds all files necessary to perform an encryption

        The three folders are:
            -Library - this folder stores all text files you want to use with this program
            -Files_Decrypted - this is where the generated decrypted files go
            -Files_Encrypted - this is where the generated encrypetd files go
            -Files_Logs - where the logs from testig go


CRYPTOGRAPHY_RUNNER.PY



MISCELLANEOUS.PY
    This file holds functions and resources useful throughout the project

    Structure:
        I. Resources - this area hold resources that generally deal with the type of encryptions/decryptions and
        character sets available. Also, some resources necessary for algorithms in the same file is also stored here.

        II. User Interfacing and Function Calls - these functions are called from files from Decryption and Encryption
        when their execute() function is called. It makes calls to Section IV in order to get
        user data and write down useful information. These functions also return the encrypted/decrypted text back to
        execute()

        III. Useful Algorithms - this contains algorithms that are used in encrypt() and decrypt() from files in
        Encryption and Decryption

        IV. Helper Functions - functions to process user input and write down relevant information. Called from
        functions in Section II for convenience.


TEST.PY


ENCRYPTION

    GENERAL FILE FORMAT
        def execute() - this function makes a call to miscellaneous's function to encrypt/decrypt in the section:
        USER INTERFACING AND FUNCTION CALLS. miscellaneous's function asks for user input and and writes down
        relevant information to a file. It also returns the encrypted text for this function(execute) to return
        back to cryptography_runner.py. This function is called from cryptography_runner.py

        def encrypt() - this function contains the actual algorithm to encrypt the plain text. It is generally called
        from miscellaneous' encrypt/decrypt function. When in testing mode, however, it is called from test.py


    VIGENERE.PY - This is the regular vigenere that does what is expected

    VIGENERE_MULTIPLICATIVE.PY - This vigenere multiplies the character values instead of add. I added this to access
                                 more of the characters in unicode.* For ascii, and extended_ascii, the characters are
                                 displayed as numbers instead of in real characters, due to limitations.

                                 Note: Vigenere_multiplicative stores the numbers in a list and then concatenates the
                                 list together into a single string later on. Because of the large amount of text
                                 involved, handling the numbers in a list is much faster.

          * Unicode has certain characters called surrogates. These are unprintable. As a result, I had to adjust my
          numbers so that any values that would match surrogates are pushed into the corresponding character. This
          corresponding character is as far away from the end of the surrogates as the "before" value is from the
          start of the surrogates

    VIGENERE_EXPONENTIAL.PY - This vigenere takes the plaintext value to the power of the keyword character value. This
                              results in a ciphertext whose characters are even more evenly distributed in unicode.

                              Note: Decryption assumes that the plain text uses only ascii characters(for performance)





DECRYPTION

    GENERAL FILE FORMAT
        def execute() - this function makes a call to miscellaneous's function to encrypt/decrypt in the section:
         USER INTERFACING AND FUNCTION CALLS. miscellaneous's function asks for user input if necessary and and writes
         down relevant information to a file. It also returns the decrypted text for this function(execute) to return
         back to cryptography_runner.py. This function is called from cryptography_runner.py

        def testing_execute() - this function is called from test.py. It is the testing form of execute, which means
        that file are not generated in Files_Encrypted or Files_Decrypted. Instead, it writes statistics and
        plain and cipher text to a file in Files_Logs. This function calles decrypt() directly. This function is called
        fro test.py

        def decrypt() - this function contains the actual algorithm to decrypt the cipher text. It is generally called
        from miscellaneous' encrypt/decrypt function. When in testing mode, however, it is called from testing_execute()
